/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12-1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CommonCropNamesResponse;
import io.swagger.annotations.*;

import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-04T21:50:05.517Z")

@Api(value = "commonCropNames", description = "the commonCropNames API")
public interface CommonCropNamesApi {

    @ApiOperation(value = "List supported crops", nickname = "commonCropNamesGet", notes = "List the common crop names for the crops available in a database server.   This call is **required** for multi-crop systems where data from multiple crops may be stored in the same database server. A distinct database server is defined by everything in the URL before \"/brapi/v1\", including host name and base path.    This call is recommended for single crop systems to be compatible with multi-crop clients. For a single crop system the response should contain an array with exactly 1 element.   The common crop name can be used as a search parameter for Programs, Studies, and Germplasm.  <a href=\"https://test-server.brapi.org/brapi/v1/commonCropNames\"> test-server.brapi.org/brapi/v1/commonCropNames</a>", response = CommonCropNamesResponse.class, tags={ "Crops", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CommonCropNamesResponse.class) })
    @RequestMapping(value = "/commoncropnames",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CommonCropNamesResponse> commonCropNamesGet(@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page) throws BrAPIServerException;

}
